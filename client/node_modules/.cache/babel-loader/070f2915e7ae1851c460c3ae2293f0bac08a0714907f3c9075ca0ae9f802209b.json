{"ast":null,"code":"var _jsxFileName = \"/Users/thuramyint/to-do-node/client/src/components/todo.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, useRef, act } from \"react\";\n// import axios from 'axios';\n\n// function ToDoApp() {\n//   const [todo, setTodo] = useState(\"\");// get updated data from input field\n//   const [todolist, setTodolist] = useState([]);// get to do list from DB\n//   const [prolist, setProList] = useState([]);// get in progress list from DB\n//   const [completed, setCompleted]= useState([]);// get completed lis from DB\n//   const [updating, setUpdating] = useState(false);// variable to control function of input field\n//   const [action, setAction] = useState(\"Add To Task\");// show function\n//   const [source, setSource] = useState(\"todo\");\n//   const [updatedSource, setUpdatedSource] = useState(\"todo\");\n//   const [dragging, setDragging ] = useState(false);\n//   const dragRef=useRef({});\n//   const clickRef=useRef({});\n\n//   useEffect(() => {\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     const eventSource=new EventSource('http://localhost:5002/api/stream');\n//     eventSource.onmessage=(event)=>{\n//       const change=JSON.parse(event.data);\n//       handleDatabaseChange(change);\n//     };\n//     return ()=>{\n//       eventSource.close();\n//     };\n//   }, []);\n// // --------------------------------------------get Data from database---------------------------------\n//   const getTodos = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/todo');\n//       setTodolist(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getInProgress = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/inProgress');\n//       setProList(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getCompleted = async ()=>{\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/completed');\n//       setCompleted(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n//   //--------------------------------------------get Data from database---------------------------------\n//   // --------------------------------------------add Data to database---------------------------------\n//   const add = async (e) => {\n//     e.preventDefault(); \n//     if(todo.trim()===\"\")\n//     {\n//       alert(\"Task Can't Be Blank\");  \n//       return;\n//     }\n//     try {\n//       await axios.post(`http://localhost:5002/api/${updatedSource}`,{\n//         name : todo\n//       });\n//       setTodo('');\n//       getTodos();\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n// //  --------------------------------------------add Data to database---------------------------------\n// // --------------------------------------------update Data to database---------------------------------\n// const updateTodo =async (e)=>{\n//   e.preventDefault();\n//   const id=clickRef.current.id;\n//   console.log(todo, source, id)\n//   try {\n//     await axios.put(`http://localhost:5002/api/${source}/${id}`,{\n//       name:todo,\n//     });\n//     setTodo('');\n//     getTodos();\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------update Data to database---------------------------------\n// // --------------------------------------------delete Data from database---------------------------------\n// const deleteitem =async (e)=>{\n//   e.preventDefault();\n//   var id=dragging?dragRef.current.id:clickRef.current.id;\n//   var source=dragging?dragRef.current.source:clickRef.current.source;\n//   try {\n//     await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n//     setTodo(\"\");\n//     setUpdating(false);\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     setAction(\"Add To Task\");\n\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------delete Data from database---------------------------------\n//   const executeAction=(e)=>{\n//     console.log(action);\n//     if(action==='Add To Task')\n//     {\n//       add(e);\n//     }\n//     else if(action === 'Update')\n//     {\n//       updateTodo(e);\n//     }\n\n//   }\n//   // --------------------------------------------delete Data from database---------------------------------\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleClick=(source,task,id)=>{\n//     setSource(source);\n//     setTodo(task);\n//     setUpdating(true);\n//     setAction(\"Update\");\n//     clickRef.current={source,task,id};\n//     console.log(clickRef);\n//   }\n//   const clickToReset=()=>{\n//     setUpdating(false);\n//     setAction(\"Add To Task\");\n//     setTodo('');\n//   }\n//   const handleDragStart = (source, item, id)=>{\n//     setTodo(item);\n//     setDragging(true);\n//     // setDraggedIndex(index);\n//     dragRef.current = {source, item, id};\n//     // console.log(dragRef.current);\n//     // console.log(index, dragRef, todo);\n//   }\n//   const handleDragEnter=(destination)=>{\n//     // console.log(id);\n//     setUpdatedSource(destination);\n//     // console.log(updatedSource);\n//   }\n//   const handleDrop=(e)=>{\n//     if(dragging){\n//       const { source, item, id}=dragRef.current;\n//       if(source !== updatedSource)\n//       {\n//         deleteitem(e);\n//         add(e); \n//       }\n//       setDragging(false);\n//     }\n//   }\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleDatabaseChange = (change) => {\n//     if (change.operationType === 'insert') {\n//       const newDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => [...prev, newDocument]);\n//       }\n//     } else if (change.operationType === 'update') {\n//       const updatedDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       }\n//     } else if (change.operationType === 'delete') {\n//       const deletedDocumentId = change.documentKey._id;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       }\n//     }\n//   };\n//   return (\n//     <div className=\"p-10 flex flex-col h-screen text-lg items-center\">\n//       <form className=\"flex sm:flex-row flex-col\" onSubmit={executeAction}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"New Task\"\n//           className=\"border-2 px-3 py-2 flex-shrink-1\"\n//           value={todo}\n//           onChange={(e) => setTodo(e.target.value)}\n//         />\n//         <input\n//           type=\"submit\"\n//           value={action}\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n\n//         />\n//         {updating?<div>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={clickToReset}>\n//           Cancel</button>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={deleteitem}\n//           >\n//             Delete\n//           </button>\n//         </div>:\"\"}\n//       </form>\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 lg:gap-10 md:gap-2 gap-0\">\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-orange-300 py-2\">To Do List</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//            onDragEnter={()=>handleDragEnter(\"todo\")}\n//            onDragOver={(e)=>{e.preventDefault()}}\n//            onDrop={(e)=>handleDrop(e)}\n//            >\n//             {todolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-orange-400 px-4 py-2 rounded-md mb-1 text-slate-700\"\n//                 onClick={()=>handleClick(\"todo\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"todo\", item.name, item._id)}\n//               >\n//                 {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-blue-300 py-2\">In Progress</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"inProgress\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {prolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-blue-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"inProgress\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"inProgress\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-green-300 py-2\">Completed</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"completed\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {completed.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-green-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"completed\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"completed\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ToDoApp;\nimport { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoApp = () => {\n  _s();\n  const [todo, setTodo] = useState('');\n  const [todolist, setTodolist] = useState([]);\n  const [prolist, setProList] = useState([]);\n  const [completed, setCompleted] = useState([]);\n  const [updating, setUpdating] = useState(false);\n  const [action, setAction] = useState('Add To Task');\n  const [source, setSource] = useState('');\n  const [updatedSource, setUpdatedSource] = useState('');\n  const [dragging, setDragging] = useState(false);\n  const clickRef = useRef({});\n  const dragRef = useRef({});\n  useEffect(() => {\n    getTodos();\n    getInProgress();\n    getCompleted();\n    const eventSource = new EventSource('http://localhost:5002/api/stream');\n    eventSource.onmessage = event => {\n      const change = JSON.parse(event.data);\n      handleDatabaseChange(change);\n    };\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n  const getTodos = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/todo');\n      setTodolist(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getInProgress = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/inProgress');\n      setProList(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getCompleted = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/completed');\n      setCompleted(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const add = async e => {\n    e.preventDefault();\n    if (todo.trim() === '') {\n      alert(\"Task Can't Be Blank\");\n      return;\n    }\n    try {\n      await axios.post(`http://localhost:5002/api/${updatedSource}`, {\n        name: todo\n      });\n      setTodo('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const updateTodo = async e => {\n    e.preventDefault();\n    const id = clickRef.current.id;\n    console.log(todo, source, id);\n    try {\n      await axios.put(`http://localhost:5002/api/${source}/${id}`, {\n        name: todo\n      });\n      setTodo('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const deleteitem = async e => {\n    e.preventDefault();\n    var id = dragging ? dragRef.current.id : clickRef.current.id;\n    var source = dragging ? dragRef.current.source : clickRef.current.source;\n    try {\n      await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n      setTodo('');\n      setUpdating(false);\n      setAction('Add To Task');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const executeAction = e => {\n    console.log(action);\n    if (action === 'Add To Task') {\n      add(e);\n    } else if (action === 'Update') {\n      updateTodo(e);\n    }\n  };\n  const handleClick = (source, task, id) => {\n    setSource(source);\n    setTodo(task);\n    setUpdating(true);\n    setAction('Update');\n    clickRef.current = {\n      source,\n      task,\n      id\n    };\n    console.log(clickRef);\n  };\n  const clickToReset = () => {\n    setUpdating(false);\n    setAction('Add To Task');\n    setTodo('');\n  };\n  const handleDragStart = (source, item, id) => {\n    setTodo(item);\n    setDragging(true);\n    dragRef.current = {\n      source,\n      item,\n      id\n    };\n  };\n  const handleDragEnter = destination => {\n    setUpdatedSource(destination);\n  };\n  const handleDrop = e => {\n    if (dragging) {\n      const {\n        source,\n        item,\n        id\n      } = dragRef.current;\n      if (source !== updatedSource) {\n        deleteitem(e);\n        add(e);\n      }\n      setDragging(false);\n    }\n  };\n  const handleDatabaseChange = change => {\n    if (change.operationType === 'insert') {\n      const newDocument = change.fullDocument;\n      if (change.ns.coll === 'todos') {\n        setTodolist(prev => [...prev, newDocument]);\n      } else if (change.ns.coll === 'inprogress') {\n        setProList(prev => [...prev, newDocument]);\n      } else if (change.ns.coll === 'completed') {\n        setCompleted(prev => [...prev, newDocument]);\n      }\n    } else if (change.operationType === 'update') {\n      const updatedDocument = change.fullDocument;\n      if (change.ns.coll === 'todos') {\n        setTodolist(prev => prev.map(item => item._id === updatedDocument._id ? updatedDocument : item));\n      } else if (change.ns.coll === 'inprogress') {\n        setProList(prev => prev.map(item => item._id === updatedDocument._id ? updatedDocument : item));\n      } else if (change.ns.coll === 'completed') {\n        setCompleted(prev => prev.map(item => item._id === updatedDocument._id ? updatedDocument : item));\n      }\n    } else if (change.operationType === 'delete') {\n      const deletedDocumentId = change.documentKey._id;\n      if (change.ns.coll === 'todos') {\n        setTodolist(prev => prev.filter(item => item._id !== deletedDocumentId));\n      } else if (change.ns.coll === 'inprogress') {\n        setProList(prev => prev.filter(item => item._id !== deletedDocumentId));\n      } else if (change.ns.coll === 'completed') {\n        setCompleted(prev => prev.filter(item => item._id !== deletedDocumentId));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-10 flex flex-col h-screen text-lg items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex sm:flex-row flex-col\",\n      onSubmit: executeAction,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New Task\",\n        className: \"border-2 px-3 py-2 flex-shrink-1\",\n        value: todo,\n        onChange: e => setTodo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: action,\n        className: \"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), updating ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\",\n          onClick: deleteitem,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\",\n          onClick: clickToReset,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4 mt-6 w-full h-full overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\",\n        onDragEnter: () => handleDragEnter('todo'),\n        onDragEnd: handleDrop,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-semibold\",\n          children: \"To Do\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), todolist.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-2 rounded-sm mt-3 w-full\",\n          draggable: true,\n          onClick: () => handleClick('todo', task.name, task._id),\n          onDragStart: () => handleDragStart('todo', task.name, task._id),\n          children: task.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\",\n        onDragEnter: () => handleDragEnter('inProgress'),\n        onDragEnd: handleDrop,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-semibold\",\n          children: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), prolist.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-2 rounded-sm mt-3 w-full\",\n          draggable: true,\n          onClick: () => handleClick('inProgress', task.name, task._id),\n          onDragStart: () => handleDragStart('inProgress', task.name, task._id),\n          children: task.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\",\n        onDragEnter: () => handleDragEnter('completed'),\n        onDragEnd: handleDrop,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"font-semibold\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), completed.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-2 rounded-sm mt-3 w-full\",\n          draggable: true,\n          onClick: () => handleClick('completed', task.name, task._id),\n          onDragStart: () => handleDragStart('completed', task.name, task._id),\n          children: task.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoApp, \"hasmlDZeF0AeDRKIIS3x5wnDSyA=\");\n_c = TodoApp;\nexport default TodoApp;\nvar _c;\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"names":["useEffect","useState","useRef","axios","jsxDEV","_jsxDEV","TodoApp","_s","todo","setTodo","todolist","setTodolist","prolist","setProList","completed","setCompleted","updating","setUpdating","action","setAction","source","setSource","updatedSource","setUpdatedSource","dragging","setDragging","clickRef","dragRef","getTodos","getInProgress","getCompleted","eventSource","EventSource","onmessage","event","change","JSON","parse","data","handleDatabaseChange","close","response","get","error","console","log","add","e","preventDefault","trim","alert","post","name","updateTodo","id","current","put","deleteitem","delete","executeAction","handleClick","task","clickToReset","handleDragStart","item","handleDragEnter","destination","handleDrop","operationType","newDocument","fullDocument","ns","coll","prev","updatedDocument","map","_id","deletedDocumentId","documentKey","filter","className","children","onSubmit","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDragEnter","onDragEnd","index","draggable","onDragStart","_c","$RefreshReg$"],"sources":["/Users/thuramyint/to-do-node/client/src/components/todo.js"],"sourcesContent":["// import { useState, useEffect, useRef, act } from \"react\";\n// import axios from 'axios';\n\n// function ToDoApp() {\n//   const [todo, setTodo] = useState(\"\");// get updated data from input field\n//   const [todolist, setTodolist] = useState([]);// get to do list from DB\n//   const [prolist, setProList] = useState([]);// get in progress list from DB\n//   const [completed, setCompleted]= useState([]);// get completed lis from DB\n//   const [updating, setUpdating] = useState(false);// variable to control function of input field\n//   const [action, setAction] = useState(\"Add To Task\");// show function\n//   const [source, setSource] = useState(\"todo\");\n//   const [updatedSource, setUpdatedSource] = useState(\"todo\");\n//   const [dragging, setDragging ] = useState(false);\n//   const dragRef=useRef({});\n//   const clickRef=useRef({});\n\n//   useEffect(() => {\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     const eventSource=new EventSource('http://localhost:5002/api/stream');\n//     eventSource.onmessage=(event)=>{\n//       const change=JSON.parse(event.data);\n//       handleDatabaseChange(change);\n//     };\n//     return ()=>{\n//       eventSource.close();\n//     };\n//   }, []);\n// // --------------------------------------------get Data from database---------------------------------\n//   const getTodos = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/todo');\n//       setTodolist(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getInProgress = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/inProgress');\n//       setProList(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getCompleted = async ()=>{\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/completed');\n//       setCompleted(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n//   //--------------------------------------------get Data from database---------------------------------\n//   // --------------------------------------------add Data to database---------------------------------\n//   const add = async (e) => {\n//     e.preventDefault(); \n//     if(todo.trim()===\"\")\n//     {\n//       alert(\"Task Can't Be Blank\");  \n//       return;\n//     }\n//     try {\n//       await axios.post(`http://localhost:5002/api/${updatedSource}`,{\n//         name : todo\n//       });\n//       setTodo('');\n//       getTodos();\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n// //  --------------------------------------------add Data to database---------------------------------\n// // --------------------------------------------update Data to database---------------------------------\n// const updateTodo =async (e)=>{\n//   e.preventDefault();\n//   const id=clickRef.current.id;\n//   console.log(todo, source, id)\n//   try {\n//     await axios.put(`http://localhost:5002/api/${source}/${id}`,{\n//       name:todo,\n//     });\n//     setTodo('');\n//     getTodos();\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------update Data to database---------------------------------\n// // --------------------------------------------delete Data from database---------------------------------\n// const deleteitem =async (e)=>{\n//   e.preventDefault();\n//   var id=dragging?dragRef.current.id:clickRef.current.id;\n//   var source=dragging?dragRef.current.source:clickRef.current.source;\n//   try {\n//     await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n//     setTodo(\"\");\n//     setUpdating(false);\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     setAction(\"Add To Task\");\n\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------delete Data from database---------------------------------\n//   const executeAction=(e)=>{\n//     console.log(action);\n//     if(action==='Add To Task')\n//     {\n//       add(e);\n//     }\n//     else if(action === 'Update')\n//     {\n//       updateTodo(e);\n//     }\n\n//   }\n//   // --------------------------------------------delete Data from database---------------------------------\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleClick=(source,task,id)=>{\n//     setSource(source);\n//     setTodo(task);\n//     setUpdating(true);\n//     setAction(\"Update\");\n//     clickRef.current={source,task,id};\n//     console.log(clickRef);\n//   }\n//   const clickToReset=()=>{\n//     setUpdating(false);\n//     setAction(\"Add To Task\");\n//     setTodo('');\n//   }\n//   const handleDragStart = (source, item, id)=>{\n//     setTodo(item);\n//     setDragging(true);\n//     // setDraggedIndex(index);\n//     dragRef.current = {source, item, id};\n//     // console.log(dragRef.current);\n//     // console.log(index, dragRef, todo);\n//   }\n//   const handleDragEnter=(destination)=>{\n//     // console.log(id);\n//     setUpdatedSource(destination);\n//     // console.log(updatedSource);\n//   }\n//   const handleDrop=(e)=>{\n//     if(dragging){\n//       const { source, item, id}=dragRef.current;\n//       if(source !== updatedSource)\n//       {\n//         deleteitem(e);\n//         add(e); \n//       }\n//       setDragging(false);\n//     }\n//   }\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleDatabaseChange = (change) => {\n//     if (change.operationType === 'insert') {\n//       const newDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => [...prev, newDocument]);\n//       }\n//     } else if (change.operationType === 'update') {\n//       const updatedDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       }\n//     } else if (change.operationType === 'delete') {\n//       const deletedDocumentId = change.documentKey._id;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       }\n//     }\n//   };\n//   return (\n//     <div className=\"p-10 flex flex-col h-screen text-lg items-center\">\n//       <form className=\"flex sm:flex-row flex-col\" onSubmit={executeAction}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"New Task\"\n//           className=\"border-2 px-3 py-2 flex-shrink-1\"\n//           value={todo}\n//           onChange={(e) => setTodo(e.target.value)}\n//         />\n//         <input\n//           type=\"submit\"\n//           value={action}\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n\n//         />\n//         {updating?<div>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={clickToReset}>\n//           Cancel</button>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={deleteitem}\n//           >\n//             Delete\n//           </button>\n//         </div>:\"\"}\n//       </form>\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 lg:gap-10 md:gap-2 gap-0\">\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-orange-300 py-2\">To Do List</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//            onDragEnter={()=>handleDragEnter(\"todo\")}\n//            onDragOver={(e)=>{e.preventDefault()}}\n//            onDrop={(e)=>handleDrop(e)}\n//            >\n//             {todolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-orange-400 px-4 py-2 rounded-md mb-1 text-slate-700\"\n//                 onClick={()=>handleClick(\"todo\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"todo\", item.name, item._id)}\n//               >\n//                 {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-blue-300 py-2\">In Progress</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"inProgress\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {prolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-blue-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"inProgress\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"inProgress\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-green-300 py-2\">Completed</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"completed\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {completed.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-green-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"completed\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"completed\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ToDoApp;\nimport { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\n\nconst TodoApp = () => {\n  const [todo, setTodo] = useState('');\n  const [todolist, setTodolist] = useState([]);\n  const [prolist, setProList] = useState([]);\n  const [completed, setCompleted] = useState([]);\n  const [updating, setUpdating] = useState(false);\n  const [action, setAction] = useState('Add To Task');\n  const [source, setSource] = useState('');\n  const [updatedSource, setUpdatedSource] = useState('');\n  const [dragging, setDragging] = useState(false);\n  const clickRef = useRef({});\n  const dragRef = useRef({});\n\n  useEffect(() => {\n    getTodos();\n    getInProgress();\n    getCompleted();\n\n    const eventSource = new EventSource('http://localhost:5002/api/stream');\n\n    eventSource.onmessage = (event) => {\n      const change = JSON.parse(event.data);\n      handleDatabaseChange(change);\n    };\n\n    return () => {\n      eventSource.close();\n    };\n  }, []);\n\n  const getTodos = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/todo');\n      setTodolist(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getInProgress = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/inProgress');\n      setProList(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCompleted = async () => {\n    try {\n      const response = await axios.get('http://localhost:5002/api/completed');\n      setCompleted(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const add = async (e) => {\n    e.preventDefault();\n    if (todo.trim() === '') {\n      alert(\"Task Can't Be Blank\");\n      return;\n    }\n    try {\n      await axios.post(`http://localhost:5002/api/${updatedSource}`, {\n        name: todo,\n      });\n      setTodo('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateTodo = async (e) => {\n    e.preventDefault();\n    const id = clickRef.current.id;\n    console.log(todo, source, id);\n    try {\n      await axios.put(`http://localhost:5002/api/${source}/${id}`, {\n        name: todo,\n      });\n      setTodo('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const deleteitem = async (e) => {\n    e.preventDefault();\n    var id = dragging ? dragRef.current.id : clickRef.current.id;\n    var source = dragging ? dragRef.current.source : clickRef.current.source;\n    try {\n      await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n      setTodo('');\n      setUpdating(false);\n      setAction('Add To Task');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const executeAction = (e) => {\n    console.log(action);\n    if (action === 'Add To Task') {\n      add(e);\n    } else if (action === 'Update') {\n      updateTodo(e);\n    }\n  };\n\n  const handleClick = (source, task, id) => {\n    setSource(source);\n    setTodo(task);\n    setUpdating(true);\n    setAction('Update');\n    clickRef.current = { source, task, id };\n    console.log(clickRef);\n  };\n\n  const clickToReset = () => {\n    setUpdating(false);\n    setAction('Add To Task');\n    setTodo('');\n  };\n\n  const handleDragStart = (source, item, id) => {\n    setTodo(item);\n    setDragging(true);\n    dragRef.current = { source, item, id };\n  };\n\n  const handleDragEnter = (destination) => {\n    setUpdatedSource(destination);\n  };\n\n  const handleDrop = (e) => {\n    if (dragging) {\n      const { source, item, id } = dragRef.current;\n      if (source !== updatedSource) {\n        deleteitem(e);\n        add(e);\n      }\n      setDragging(false);\n    }\n  };\n\n  const handleDatabaseChange = (change) => {\n    if (change.operationType === 'insert') {\n      const newDocument = change.fullDocument;\n      if (change.ns.coll === 'todos') {\n        setTodolist((prev) => [...prev, newDocument]);\n      } else if (change.ns.coll === 'inprogress') {\n        setProList((prev) => [...prev, newDocument]);\n      } else if (change.ns.coll === 'completed') {\n        setCompleted((prev) => [...prev, newDocument]);\n      }\n    } else if (change.operationType === 'update') {\n      const updatedDocument = change.fullDocument;\n      if (change.ns.coll === 'todos') {\n        setTodolist((prev) =>\n          prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n        );\n      } else if (change.ns.coll === 'inprogress') {\n        setProList((prev) =>\n          prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n        );\n      } else if (change.ns.coll === 'completed') {\n        setCompleted((prev) =>\n          prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n        );\n      }\n    } else if (change.operationType === 'delete') {\n      const deletedDocumentId = change.documentKey._id;\n      if (change.ns.coll === 'todos') {\n        setTodolist((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n      } else if (change.ns.coll === 'inprogress') {\n        setProList((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n      } else if (change.ns.coll === 'completed') {\n        setCompleted((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-10 flex flex-col h-screen text-lg items-center\">\n      <form className=\"flex sm:flex-row flex-col\" onSubmit={executeAction}>\n        <input\n          type=\"text\"\n          placeholder=\"New Task\"\n          className=\"border-2 px-3 py-2 flex-shrink-1\"\n          value={todo}\n          onChange={(e) => setTodo(e.target.value)}\n        />\n        <input\n          type=\"submit\"\n          value={action}\n          className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n        />\n        {updating ? (\n          <div>\n            <button\n              className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n              onClick={deleteitem}\n            >\n              Delete\n            </button>\n            <button\n              className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n              onClick={clickToReset}\n            >\n              Cancel\n            </button>\n          </div>\n        ) : (\n          ''\n        )}\n      </form>\n\n      <div className=\"grid grid-cols-3 gap-4 mt-6 w-full h-full overflow-hidden\">\n        {/* To Do */}\n        <div\n          className=\"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\"\n          onDragEnter={() => handleDragEnter('todo')}\n          onDragEnd={handleDrop}\n        >\n          <h2 className=\"font-semibold\">To Do</h2>\n          {todolist.map((task, index) => (\n            <div\n              key={index}\n              className=\"bg-white p-2 rounded-sm mt-3 w-full\"\n              draggable\n              onClick={() => handleClick('todo', task.name, task._id)}\n              onDragStart={() => handleDragStart('todo', task.name, task._id)}\n            >\n              {task.name}\n            </div>\n          ))}\n        </div>\n\n        {/* In Progress */}\n        <div\n          className=\"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\"\n          onDragEnter={() => handleDragEnter('inProgress')}\n          onDragEnd={handleDrop}\n        >\n          <h2 className=\"font-semibold\">In Progress</h2>\n          {prolist.map((task, index) => (\n            <div\n              key={index}\n              className=\"bg-white p-2 rounded-sm mt-3 w-full\"\n              draggable\n              onClick={() => handleClick('inProgress', task.name, task._id)}\n              onDragStart={() => handleDragStart('inProgress', task.name, task._id)}\n            >\n              {task.name}\n            </div>\n          ))}\n        </div>\n\n        {/* Completed */}\n        <div\n          className=\"flex flex-col items-center border-2 border-black p-4 overflow-y-scroll h-full w-full bg-gray-300\"\n          onDragEnter={() => handleDragEnter('completed')}\n          onDragEnd={handleDrop}\n        >\n          <h2 className=\"font-semibold\">Completed</h2>\n          {completed.map((task, index) => (\n            <div\n              key={index}\n              className=\"bg-white p-2 rounded-sm mt-3 w-full\"\n              draggable\n              onClick={() => handleClick('completed', task.name, task._id)}\n              onDragStart={() => handleDragStart('completed', task.name, task._id)}\n            >\n              {task.name}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoApp;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}