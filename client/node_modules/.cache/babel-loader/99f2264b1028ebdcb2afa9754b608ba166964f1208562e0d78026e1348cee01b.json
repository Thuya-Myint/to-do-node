{"ast":null,"code":"// import { useState, useEffect, useRef, act } from \"react\";\n// import axios from 'axios';\n\n// function ToDoApp() {\n//   const [todo, setTodo] = useState(\"\");// get updated data from input field\n//   const [todolist, setTodolist] = useState([]);// get to do list from DB\n//   const [prolist, setProList] = useState([]);// get in progress list from DB\n//   const [completed, setCompleted]= useState([]);// get completed lis from DB\n//   const [updating, setUpdating] = useState(false);// variable to control function of input field\n//   const [action, setAction] = useState(\"Add To Task\");// show function\n//   const [source, setSource] = useState(\"todo\");\n//   const [updatedSource, setUpdatedSource] = useState(\"todo\");\n//   const [dragging, setDragging ] = useState(false);\n//   const dragRef=useRef({});\n//   const clickRef=useRef({});\n\n//   useEffect(() => {\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     const eventSource=new EventSource('http://localhost:5002/api/stream');\n//     eventSource.onmessage=(event)=>{\n//       const change=JSON.parse(event.data);\n//       handleDatabaseChange(change);\n//     };\n//     return ()=>{\n//       eventSource.close();\n//     };\n//   }, []);\n// // --------------------------------------------get Data from database---------------------------------\n//   const getTodos = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/todo');\n//       setTodolist(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getInProgress = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/inProgress');\n//       setProList(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getCompleted = async ()=>{\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/completed');\n//       setCompleted(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n//   //--------------------------------------------get Data from database---------------------------------\n//   // --------------------------------------------add Data to database---------------------------------\n//   const add = async (e) => {\n//     e.preventDefault(); \n//     if(todo.trim()===\"\")\n//     {\n//       alert(\"Task Can't Be Blank\");  \n//       return;\n//     }\n//     try {\n//       await axios.post(`http://localhost:5002/api/${updatedSource}`,{\n//         name : todo\n//       });\n//       setTodo('');\n//       getTodos();\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n// //  --------------------------------------------add Data to database---------------------------------\n// // --------------------------------------------update Data to database---------------------------------\n// const updateTodo =async (e)=>{\n//   e.preventDefault();\n//   const id=clickRef.current.id;\n//   console.log(todo, source, id)\n//   try {\n//     await axios.put(`http://localhost:5002/api/${source}/${id}`,{\n//       name:todo,\n//     });\n//     setTodo('');\n//     getTodos();\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------update Data to database---------------------------------\n// // --------------------------------------------delete Data from database---------------------------------\n// const deleteitem =async (e)=>{\n//   e.preventDefault();\n//   var id=dragging?dragRef.current.id:clickRef.current.id;\n//   var source=dragging?dragRef.current.source:clickRef.current.source;\n//   try {\n//     await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n//     setTodo(\"\");\n//     setUpdating(false);\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     setAction(\"Add To Task\");\n\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------delete Data from database---------------------------------\n//   const executeAction=(e)=>{\n//     console.log(action);\n//     if(action==='Add To Task')\n//     {\n//       add(e);\n//     }\n//     else if(action === 'Update')\n//     {\n//       updateTodo(e);\n//     }\n\n//   }\n//   // --------------------------------------------delete Data from database---------------------------------\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleClick=(source,task,id)=>{\n//     setSource(source);\n//     setTodo(task);\n//     setUpdating(true);\n//     setAction(\"Update\");\n//     clickRef.current={source,task,id};\n//     console.log(clickRef);\n//   }\n//   const clickToReset=()=>{\n//     setUpdating(false);\n//     setAction(\"Add To Task\");\n//     setTodo('');\n//   }\n//   const handleDragStart = (source, item, id)=>{\n//     setTodo(item);\n//     setDragging(true);\n//     // setDraggedIndex(index);\n//     dragRef.current = {source, item, id};\n//     // console.log(dragRef.current);\n//     // console.log(index, dragRef, todo);\n//   }\n//   const handleDragEnter=(destination)=>{\n//     // console.log(id);\n//     setUpdatedSource(destination);\n//     // console.log(updatedSource);\n//   }\n//   const handleDrop=(e)=>{\n//     if(dragging){\n//       const { source, item, id}=dragRef.current;\n//       if(source !== updatedSource)\n//       {\n//         deleteitem(e);\n//         add(e); \n//       }\n//       setDragging(false);\n//     }\n//   }\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleDatabaseChange = (change) => {\n//     if (change.operationType === 'insert') {\n//       const newDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => [...prev, newDocument]);\n//       }\n//     } else if (change.operationType === 'update') {\n//       const updatedDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       }\n//     } else if (change.operationType === 'delete') {\n//       const deletedDocumentId = change.documentKey._id;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       }\n//     }\n//   };\n//   return (\n//     <div className=\"p-10 flex flex-col h-screen text-lg items-center\">\n//       <form className=\"flex sm:flex-row flex-col\" onSubmit={executeAction}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"New Task\"\n//           className=\"border-2 px-3 py-2 flex-shrink-1\"\n//           value={todo}\n//           onChange={(e) => setTodo(e.target.value)}\n//         />\n//         <input\n//           type=\"submit\"\n//           value={action}\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n\n//         />\n//         {updating?<div>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={clickToReset}>\n//           Cancel</button>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={deleteitem}\n//           >\n//             Delete\n//           </button>\n//         </div>:\"\"}\n//       </form>\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 lg:gap-10 md:gap-2 gap-0\">\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-orange-300 py-2\">To Do List</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//            onDragEnter={()=>handleDragEnter(\"todo\")}\n//            onDragOver={(e)=>{e.preventDefault()}}\n//            onDrop={(e)=>handleDrop(e)}\n//            >\n//             {todolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-orange-400 px-4 py-2 rounded-md mb-1 text-slate-700\"\n//                 onClick={()=>handleClick(\"todo\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"todo\", item.name, item._id)}\n//               >\n//                 {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-blue-300 py-2\">In Progress</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"inProgress\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {prolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-blue-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"inProgress\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"inProgress\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-green-300 py-2\">Completed</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"completed\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {completed.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-green-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"completed\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"completed\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ToDoApp;","map":{"version":3,"names":[],"sources":["/Users/thuramyint/to-do-node/client/src/components/todo.js"],"sourcesContent":["// import { useState, useEffect, useRef, act } from \"react\";\n// import axios from 'axios';\n\n// function ToDoApp() {\n//   const [todo, setTodo] = useState(\"\");// get updated data from input field\n//   const [todolist, setTodolist] = useState([]);// get to do list from DB\n//   const [prolist, setProList] = useState([]);// get in progress list from DB\n//   const [completed, setCompleted]= useState([]);// get completed lis from DB\n//   const [updating, setUpdating] = useState(false);// variable to control function of input field\n//   const [action, setAction] = useState(\"Add To Task\");// show function\n//   const [source, setSource] = useState(\"todo\");\n//   const [updatedSource, setUpdatedSource] = useState(\"todo\");\n//   const [dragging, setDragging ] = useState(false);\n//   const dragRef=useRef({});\n//   const clickRef=useRef({});\n\n//   useEffect(() => {\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     const eventSource=new EventSource('http://localhost:5002/api/stream');\n//     eventSource.onmessage=(event)=>{\n//       const change=JSON.parse(event.data);\n//       handleDatabaseChange(change);\n//     };\n//     return ()=>{\n//       eventSource.close();\n//     };\n//   }, []);\n// // --------------------------------------------get Data from database---------------------------------\n//   const getTodos = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/todo');\n//       setTodolist(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getInProgress = async () => {\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/inProgress');\n//       setProList(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n//   const getCompleted = async ()=>{\n//     try {\n//       const response=await axios.get('http://localhost:5002/api/completed');\n//       setCompleted(response.data);\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n//   //--------------------------------------------get Data from database---------------------------------\n//   // --------------------------------------------add Data to database---------------------------------\n//   const add = async (e) => {\n//     e.preventDefault(); \n//     if(todo.trim()===\"\")\n//     {\n//       alert(\"Task Can't Be Blank\");  \n//       return;\n//     }\n//     try {\n//       await axios.post(`http://localhost:5002/api/${updatedSource}`,{\n//         name : todo\n//       });\n//       setTodo('');\n//       getTodos();\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n// //  --------------------------------------------add Data to database---------------------------------\n// // --------------------------------------------update Data to database---------------------------------\n// const updateTodo =async (e)=>{\n//   e.preventDefault();\n//   const id=clickRef.current.id;\n//   console.log(todo, source, id)\n//   try {\n//     await axios.put(`http://localhost:5002/api/${source}/${id}`,{\n//       name:todo,\n//     });\n//     setTodo('');\n//     getTodos();\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------update Data to database---------------------------------\n// // --------------------------------------------delete Data from database---------------------------------\n// const deleteitem =async (e)=>{\n//   e.preventDefault();\n//   var id=dragging?dragRef.current.id:clickRef.current.id;\n//   var source=dragging?dragRef.current.source:clickRef.current.source;\n//   try {\n//     await axios.delete(`http://localhost:5002/api/${source}/${id}`);\n//     setTodo(\"\");\n//     setUpdating(false);\n//     getTodos();\n//     getInProgress();\n//     getCompleted();\n//     setAction(\"Add To Task\");\n\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\n// // --------------------------------------------delete Data from database---------------------------------\n//   const executeAction=(e)=>{\n//     console.log(action);\n//     if(action==='Add To Task')\n//     {\n//       add(e);\n//     }\n//     else if(action === 'Update')\n//     {\n//       updateTodo(e);\n//     }\n\n//   }\n//   // --------------------------------------------delete Data from database---------------------------------\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleClick=(source,task,id)=>{\n//     setSource(source);\n//     setTodo(task);\n//     setUpdating(true);\n//     setAction(\"Update\");\n//     clickRef.current={source,task,id};\n//     console.log(clickRef);\n//   }\n//   const clickToReset=()=>{\n//     setUpdating(false);\n//     setAction(\"Add To Task\");\n//     setTodo('');\n//   }\n//   const handleDragStart = (source, item, id)=>{\n//     setTodo(item);\n//     setDragging(true);\n//     // setDraggedIndex(index);\n//     dragRef.current = {source, item, id};\n//     // console.log(dragRef.current);\n//     // console.log(index, dragRef, todo);\n//   }\n//   const handleDragEnter=(destination)=>{\n//     // console.log(id);\n//     setUpdatedSource(destination);\n//     // console.log(updatedSource);\n//   }\n//   const handleDrop=(e)=>{\n//     if(dragging){\n//       const { source, item, id}=dragRef.current;\n//       if(source !== updatedSource)\n//       {\n//         deleteitem(e);\n//         add(e); \n//       }\n//       setDragging(false);\n//     }\n//   }\n//   // --------------------------------------------drag and drop---------------------------------\n//   const handleDatabaseChange = (change) => {\n//     if (change.operationType === 'insert') {\n//       const newDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => [...prev, newDocument]);\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => [...prev, newDocument]);\n//       }\n//     } else if (change.operationType === 'update') {\n//       const updatedDocument = change.fullDocument;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) =>\n//           prev.map((item) => (item._id === updatedDocument._id ? updatedDocument : item))\n//         );\n//       }\n//     } else if (change.operationType === 'delete') {\n//       const deletedDocumentId = change.documentKey._id;\n//       if (change.ns.coll === 'todos') {\n//         setTodolist((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'inprogress') {\n//         setProList((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       } else if (change.ns.coll === 'completed') {\n//         setCompleted((prev) => prev.filter((item) => item._id !== deletedDocumentId));\n//       }\n//     }\n//   };\n//   return (\n//     <div className=\"p-10 flex flex-col h-screen text-lg items-center\">\n//       <form className=\"flex sm:flex-row flex-col\" onSubmit={executeAction}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"New Task\"\n//           className=\"border-2 px-3 py-2 flex-shrink-1\"\n//           value={todo}\n//           onChange={(e) => setTodo(e.target.value)}\n//         />\n//         <input\n//           type=\"submit\"\n//           value={action}\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2\"\n\n//         />\n//         {updating?<div>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={clickToReset}>\n//           Cancel</button>\n//           <button\n//           className=\"bg-blue-500 px-4 py-2 sm:ms-1 rounded-sm border-1 border-blue-500 sm:mt-0 mt-2 h-full\"\n//           onClick={deleteitem}\n//           >\n//             Delete\n//           </button>\n//         </div>:\"\"}\n//       </form>\n//       <div className=\"grid grid-cols-1 md:grid-cols-3 lg:gap-10 md:gap-2 gap-0\">\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-orange-300 py-2\">To Do List</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//            onDragEnter={()=>handleDragEnter(\"todo\")}\n//            onDragOver={(e)=>{e.preventDefault()}}\n//            onDrop={(e)=>handleDrop(e)}\n//            >\n//             {todolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-orange-400 px-4 py-2 rounded-md mb-1 text-slate-700\"\n//                 onClick={()=>handleClick(\"todo\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"todo\", item.name, item._id)}\n//               >\n//                 {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-blue-300 py-2\">In Progress</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"inProgress\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {prolist.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-blue-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"inProgress\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"inProgress\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//         <div className=\"mt-10\">\n//           <div className=\"text-center bg-green-300 py-2\">Completed</div>\n//           <section className=\"w-56 h-80 border-2 px-2 py-1 overflow-auto\"\n//             onDragEnter={()=>handleDragEnter(\"completed\")}\n//             onDragOver={(e)=>{e.preventDefault()}}\n//             onDrop={(e)=>handleDrop(e)}\n//           >\n//             {completed.map((item, index) => (\n//               <div\n//                 key={item._id} // Use MongoDB ObjectId as key\n//                 className=\"bg-green-400 px-4 py-2 rounded-md mb-1\"\n//                 onClick={()=>handleClick(\"completed\",item.name,item._id)}\n//                 draggable onDragStart={()=> handleDragStart(\"completed\", item.name, item._id)}\n//               >\n//                {item.name}\n//               </div>\n//             ))}\n//           </section>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default ToDoApp;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}